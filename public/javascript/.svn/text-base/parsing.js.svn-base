Cruiser.Parser = {
	About: {
		Description : 'Javascript parsing library',
		Author : 'Dan Yoder',
		Version : { major: '0', minor: '7' },
		Notices : { Copyright: '(c) 2007 Dan Yoder' },
		License : 'Cruiser is freely distributable under the terms of the MIT license.',
		URL : 'http://dev.zeraweb.com/parser'
	}
};
var Parser = {};
Parser.Exception = function(s) { 
	 this.message = "Parse error at '" + s.substring(0,10) + " ...'"; 
};
Parser.Operators = {
  //
  // Tokenizers
  //
  rtoken: function(r) { // regex token
    return function(s) {
      var mx = s.match(r);
      if (mx) { return ([ mx[0], s.substring( mx[0].length) ]); }
      else throw new Parser.Exception(s);
    }
  },
	token: function(s) { // whitespace-eating token
	  return function(s) {
	    return Parser.Operators.rtoken( new RegExp('^\s*'+s+'\s*') )(s).strip();
    };
	},

  stoken: function(s) { // string token
    return Parser.Operators.rtoken( new RegExp('^'+s) ); 
  },

	//
	// Atomic Operators
	// 
	
	until: function(p) {
		return function(s) {
			var qx = [], rx = null;
			while( s.length ) { 
				try { rx = p.call(this,s); } 
				catch (e) { qx.push(rx[0]); s = rx[1]; continue; }
				break;
			}
			return [ qx, s ];
		};
	},
	many: function( p ) {
	  var _ = Parser.Operators; 
		return function(s) {
			var rx = [], r = null; while (s.length) { 
				try { r = p.call(this,s); } catch (e) { return [ rx, s ]; }
				rx.push(r[0]); s = r[1];
			}
			return [ rx, s ];
		};
	},

	// generator operators
	optional: function(p) {
	  return function(s) {
	    var r = null; try { r = p.call(this,s); } catch(e) { return [ null, s ]; }
	    return [ r[0], r[1] ];
	  };
	},
	not: function(p) {
	  return function(s) {
	    try { p.call(this,s); } catch(e) { return [null,s]; }
	    throw new Parser.Exception(s);
	  };
	},
	ignore: function(p) {
	  return p ? function(s) { var r = null; r = p.call(this,s); return [ null, r[1] ]; } : null;
	},
	product: function() {
	  var _ = Parser.Operators, px = arguments[0], 
	    qx = Array.prototype.slice.call(arguments, 1), rx = [];
	  for ( var i = 0 ; i < px.length ; i++ ) {
	    rx.push( _.each( px[i], qx ) );
	  }
	  return rx;
	},
	// vector operators
	any: function() {
	  var px = arguments;
		return function(s) { 
			var r = null;
			for (var i = 0; i<px.length; i++) { 
			  if ( px[i] == null ) { continue; }
				try { r = (px[i].call(this,s)); } catch(e) { r = null; }
				if (r) return r; 
			} 
			throw new Parser.Exception(s);
		}
	},
	each: function() { 
	  var px = arguments;
		return function(s) { 
			var rx = [], r = null;
			for ( var i = 0; i < px.length ; i++) { 
			  if ( px[i] == null ) { continue; }
				try { r = (px[i].call(this,s)); }
				catch(e) { throw new Parser.Exception(s); }
				rx.push(r[0]); s = r[1];
			}; 
			return [ rx, s]; 
		}
	},
	sequence: function(px,d,c) {
	  var _ = Parser.Operators; d = d || _.rtoken(/^\s*/);  c = c || null;
	  if ( px.length == 1 ) { return px[0]; }
	  return function(s) {
	    var r = null, q = null;
	    var rx = []; for ( var i = 0; i < px.length ; i++ ) {
	      try { r = px[i].call(this,s); } catch(e) { break; }
	      rx.push( r[0] );
  	    try { q = d.call(this,r[1]); } catch(e) { q = null; break; }
  	    s = q[1];
	    }
	    if (!r) { throw new Parser.Exception(s); }
	    if (q) { throw new Parser.Exception(q[1]); }
      if ( c ) {
        try { r = c.call( this, r[1] ) } 
        catch(e) { throw new Parser.Exception(r[1]); }
      }
      return [ rx, (r?r[1]:s) ];
    }
	},
	all: function() { 
	  var px = arguments, _ = Parser.Operators; 
	  return _.each( _.optional( px ) ); 
	},
	//
	// Composite Operators
	//
	between: function(d1,p,d2) { 
		var _ = Parser.Operators; d2 = d2||d1; 
		var _fn = _.each( _.ignore( d1 ), p, _.ignore( d2 ) );
		return function(s) { 
		  var rx = _fn.call(this,s); 
		  return [ [ rx[0][0],r[0][2] ], rx[1] ]; 
		}
	},
	list: function(p,d,c) {
	  var _ = Parser.Operators; d = d || _.rtoken(/^\s*/);  c = c || null;
	  return ( p instanceof Array ?
	    _.each( _.product( p.slice(0,-1), _.ignore( d ) ), p.slice(-1), _.ignore( c ) ) :
	    _.each( _.many( _.each( p, _.ignore( d ) ) ), px, _.ignore( c )) );
	},
	set: function(px,d,c) {
	  var _ = Parser.Operators; d = d || _.rtoken(/^\s*/); c = c || null;
	  // if ( px.length == 1 ) { return px[0]; }
	  return function(s) {
	    var r, best = [ [], s ];
	    for ( var i = 0; i < px.length ; i++ ) {
	      var last = (px.length==1); 
	      var q = null, p = null; r = null;
  	    try { r = px[i].call(this,s); } catch(e) { continue; }
  	    if ( r[1].length > 0 && ! last ) {
  	      try { q = d.call(this,r[1]); } catch(e) { last = true; }  	      
  	    } else { last = true; }
	      if ( ! last ) { 
	        if ( q[1].length > 0 ) {
    	      var qx = []; for( var j = 0; j < px.length ; j++ ) {
    	        if ( i!=j ) { qx.push(px[j]); }
    	      }
	          p = _.set(qx,d).call(this,q[1]);
	          if ( p[0].length ) {
    	        r = [ [ r[0], p[0] ], p[1] ];
  	        }
  	      }
	      }
        if( r[1].length < best[1].length ) {
          best = r; if ( r[1].length == 0 ) { break; }
        }
      }
      if ( !r ) { return best; }
      if ( c ) {
        try { c.call( this, r[1] ); } 
        catch(e) { throw new Parser.Exception(r[1]); }
      }
      return best;
    }
	},
	forward: function( gr, fname ) {
		return function(s) { return gr[fname].call(this,s); }
	},
	
	//
	// Translation Operators
	//
	replace: function( rule, repl ) {
	  return function(s) { var r = rule.call(this,s); return [ repl, r[1] ]; }
	},
  process: function(rule,fn) {
    return function(s) {  var r = rule.call(this,s); return [ fn.call(this,r[0]),r[1] ]; }
  },
  cache: function(rule) { 
    var cache = {}, val = null; return function(s) {
      try{ val = cache[s] = ( cache[s] || rule.call(this,s) ); } catch(e) { val = cache[s] = e; }
      if ( val instanceof Parser.Exception ) { throw val; }
      else { return val; }
    }
  },
  min: function( min, rule ) {
    return function(s) {
      var rx = rule.call(this,s); if ( rx[0].length < min ) { throw new Parser.Exception(s); }
      return rx;
    }
  }
};

(function() {
  var _ = Parser.Operators, 
  _cached = function( op ) {
    return function() {
      var cache = {}, fn = op.apply(null,arguments); val = null;
      return function(s) {
        try { val = cache[s] = ( cache[s] || fn.call(this,s) ); }
        catch( e ) { val = cache[s] = e; }
        if ( val instanceof Parser.Exception ) { throw val; }
        else { return val; } 
      }
    }
  },
  cx = 'rtoken stoken wtoken'.split(/\s/),
  _generator = function( op ) {
    return function() {
      if ( arguments[0] instanceof Array ) {
        var args = Array.prototype.slice.call(arguments), rx = [];
        for ( var i = 0, px = args.shift() ; i < px.length ; i++ ) {
          args.unshift(px[i]); rx.push( op.apply( null, args ) ); args.shift();
        } 
        return rx;
      } else { return op.apply( null, arguments ); }
    }
  },
  gx = 'optional not ignore cache'.split(/\s/);
  for ( var i = 0 ; i < cx.length ; i++ ) { _[ cx[i] ] = _cached( _[ cx[i] ] ); }
  for ( var i = 0 ; i < gx.length ; i++ ) { _[ gx[i] ] = _generator( _[ gx[i] ] ); }
  //_.set = function(px,d,c) { 
  //  return function(s) { 
  //    var rx = _._set(px,d,c).call(this,s);
  //    return (( rx[0] instanceof Array ) ? 
  //      [ rx[0].flatten().compact(), rx[1] ] : rx ); 
  //  };
  //};
}()); 
